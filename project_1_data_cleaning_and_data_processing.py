# -*- coding: utf-8 -*-
"""project 1-Data cleaning and data processing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JjVDXcp69uy6FaeVbfGDr9PEpHFzQQFH

implementing the data cleansing using an hr dataset includes hire date, position, salary, performance ratings, attendance, and leave records.

 1.Implementing data
"""

import pandas as pd

# Creating a sample HR dataset
data = {
    'employee_id': [1, 2, 3, 4, 5, 6],
    'salary': [50000, 60000, None, 55000, 58000, 72000],
    'age': [25, 28, 35, None, 30, 40],
    'department': ['HR', 'IT', 'HR', 'Finance', None, 'IT'],
    'hire_date': ['2015-01-15', '2016-03-20', '2018-07-10', '2017-02-28', '2019-05-22', '2014-11-01']
}

df = pd.DataFrame(data)

# Display the first few rows of the dataset
print(df.head())

# Get a summary of the dataset
print(df.info())
print(df.describe())

"""2.Identifying and handling missing values"""

# Identify missing values
missing_values = df.isnull().sum()
print("Missing values:\n", missing_values)

# Handle missing values (example: fill with mean for numerical columns)
df['salary'].fillna(df['salary'].mean(), inplace=True)
df['age'].fillna(df['age'].median(), inplace=True)

# For categorical columns, fill with mode
df['department'].fillna(df['department'].mode()[0], inplace=True)

"""3.identifying and handling outliers"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Visualize outliers using a box plot
sns.boxplot(x=df['salary'])
plt.show()

# Handle outliers (example: capping the values)
Q1 = df['salary'].quantile(0.25)
Q3 = df['salary'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df['salary'] = df['salary'].apply(lambda x: upper_bound if x > upper_bound else (lower_bound if x < lower_bound else x))

"""4.correcting inconsistences"""

import pandas as pd
import re

# Creating a sample HR dataset
data = {
    'employee_id': [1, 2, 3, 4, 5, 6],
    'salary': [50000, 60000, None, 55000, 58000, 72000],
    'age': [25, 28, 35, None, 30, 40],
    'department': ['HR', 'IT', 'HR', 'Finance', None, 'IT'],
    'hire_date': ['2015-01-15', '2016-03-20', '2018-07-10', '2017-02-28', '2019-05-22', '2014-11-01']
}

df = pd.DataFrame(data)

# Step 4: Correcting Inconsistencies
# Standardize data formats (example: date format)
df['hire_date'] = pd.to_datetime(df['hire_date'], format='%Y-%m-%d')

# Correct categorical data inconsistencies using regular expressions
def clean_department(dept):
    if isinstance(dept, str):
        dept = dept.lower().strip()
        dept = re.sub(r'\s+', ' ', dept)  # Replace multiple spaces with a single space
        dept = re.sub(r'[^a-z\s]', '', dept)  # Remove non-alphabetical characters
    return dept

df['department'] = df['department'].apply(clean_department)

# Check for inconsistencies
if df['department'].isna().sum() == 0 and df['department'].str.contains('[^a-z\s]', regex=True).sum() == 0:
    print("Data does not have inconsistencies.")
else:
    print("After correcting inconsistencies:")
    print(df)

"""5.Removing duplicates"""

# Add a duplicate row for demonstration
df = pd.concat([df, df.iloc[[2]]], ignore_index=True)

# Detect duplicates
duplicates = df.duplicated()
print(f"Number of duplicate rows: {duplicates.sum()}")

# Remove duplicates
df = df.drop_duplicates()

"""6.Feature engineering"""

import pandas as pd

# Sample data
data = {
    'hire_date': ['2015-05-20', '2018-09-15', '2020-01-10', None, '2017-07-30']
}

df = pd.DataFrame(data)

# Convert 'hire_date' to datetime format
df['hire_date'] = pd.to_datetime(df['hire_date'], format='%Y-%m-%d')

# Create 'tenure' feature with if-else condition
df['tenure'] = df['hire_date'].apply(lambda x: pd.Timestamp.now().year - x.year if pd.notnull(x) else None)

print(df)

"""7.Normalized data set

"""

import pandas as pd
import numpy as np

# Creating a sample HR dataset
data = {
    'employee_id': [1, 2, 3, 4, 5, 6],
    'salary': [50000, 60000, 59000, 55000, 58000, 72000],
    'age': [25, 28, 35, 31.6, 30, 40],
    'department': ['HR', 'IT', 'HR', 'Finance', 'unknown', 'IT'],
    'hire_date': ['2015-01-15', '2016-03-20', '2018-07-10', '2017-02-28', '2019-05-22', '2014-11-01']
}

df = pd.DataFrame(data)

# Min-Max Normalization
df['salary_min_max'] = (df['salary'] - df['salary'].min()) / (df['salary'].max() - df['salary'].min())
df['age_min_max'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())

# Z-Score Normalization
df['salary_z_score'] = (df['salary'] - df['salary'].mean()) / df['salary'].std()
df['age_z_score'] = (df['age'] - df['age'].mean()) / df['age'].std()

# Decimal Scaling
df['salary_decimal_scaling'] = df['salary'] / 10**np.ceil(np.log10(df['salary'].abs().max()))
df['age_decimal_scaling'] = df['age'] / 10**np.ceil(np.log10(df['age'].abs().max()))

# Print the normalized dataset
df

"""8.Data visualization (distributions)


*  A) histogram


"""

import matplotlib.pyplot as plt
import seaborn as sns

# Plotting a histogram for 'salary' column
plt.figure(figsize=(10, 6))
sns.histplot(df['salary'], bins=30, kde=True)
plt.title('Salary Distribution')
plt.xlabel('Salary')
plt.ylabel('Frequency')
plt.show()

"""B) box plot"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='department', y='salary', data=df)
plt.title('Salary Distribution by Department')
plt.xlabel('Department')
plt.ylabel('Salary')
plt.xticks(rotation=45)
plt.show()

""" C) violin plot"""

plt.figure(figsize=(10, 6))
sns.violinplot(x='department', y='salary', data=df)
plt.title('Salary Distribution by Department')
plt.xlabel('Department')
plt.ylabel('Salary')
plt.xticks(rotation=45)
plt.show()

"""9 Data visualizations (Relationships)


> A) scatter plot


"""

# Verify the column names in your DataFrame
print(df.columns)

# Correct the column name in the scatterplot function if there is a typo
plt.figure(figsize=(10, 6))
sns.scatterplot(x='department', y='salary', data=df)  # Replace 'correct_column_name' with the actual name
plt.title('Years of Experience vs Salary')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

"""B) pair plot"""

# Verify the column names in your DataFrame
print(df.columns)

# Correct the column name in the pairplot function if there is a typo
sns.pairplot(df, vars=['salary', 'department', 'age'])  # Replace 'yearsofexperience' with the actual name if it's different
plt.show()

"""C) correlation heatup"""

plt.figure(figsize=(10, 8))
# Select only numerical columns for correlation calculation
numerical_df = df[['salary', 'age']]
correlation_matrix = numerical_df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Heatmap')
plt.show()

"""D)count plot"""

plt.figure(figsize=(10, 6))
sns.countplot(x='department', data=df)
plt.title('Number of Employees by Department')
plt.xlabel('Department')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""E) pie chart representation"""

import matplotlib.pyplot as plt

# Sample data (replace with your actual data)
department_counts = df['department'].value_counts()

# Plotting the pie chart
plt.figure(figsize=(8, 8))
plt.pie(department_counts, labels=department_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Distribution of Employees by Department')
plt.show()

""" 10.Ensuring data quality and integrity

"""

# Check if 'tenure' column exists
if 'tenure' in df.columns:
    assert df['tenure'].min() >= 0, "There are negative values in tenure!"
else:
    print("Warning: 'tenure' column not found in the DataFrame.")

"""Thus, the project of data cleaning and data processing techniques are implemented by using python code imported libraries such as matplotlip,numpy,pandas and manymore that results desired output for the each code.

"""